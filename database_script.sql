-- Patitas QR – Script de creación de tablas (PostgreSQL)
-- Proyecto desarrollado con Flask + SQLAlchemy (ORM).
-- La estructura de tablas, relaciones e invariantes (PK, FK, UNIQUE, CHECK, índices)
-- se define en clases Python (models.py) y se crean en la BD
-- mediante migraciones (por ej. Alembic) o comandos del ORM.
-- es decir, las tablas se generan automáticamente al desplegar la aplicación.
--
-- Este archivo .sql replica esa definición para su ejecución directa
-- en PostgreSQL, sin necesidad de desplegar la aplicación.
-- Requisitos: PostgreSQL 12+ y una base de datos previamente creada.


-- ===============
-- TABLA: usuario
-- ===============
CREATE TABLE IF NOT EXISTS usuario (
    usuario_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    correo VARCHAR(50) NOT NULL,
    hash_contrasena VARCHAR(255) NOT NULL,
    rol VARCHAR(20) NOT NULL DEFAULT 'asistente',
    activo BOOLEAN NOT NULL DEFAULT TRUE,
    creado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT usuario_rol_chk CHECK (rol IN ('admin','veterinario','asistente')),
    CONSTRAINT usuario_correo_uk UNIQUE (correo)
);
CREATE INDEX IF NOT EXISTS ix_usuario_correo ON usuario (correo);

-- =================
-- TABLA: ubicacion
-- =================
CREATE TABLE IF NOT EXISTS ubicacion (
    ubicacion_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    comuna VARCHAR(50) NOT NULL,
    nombre_sector VARCHAR(100) NOT NULL,
    descripcion TEXT,
    creado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =============
-- TABLA: animal
-- =============
CREATE TABLE IF NOT EXISTS animal (
    animal_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR(50),
    especie VARCHAR(50) NOT NULL,
    sexo VARCHAR(10),
    color VARCHAR(50),
    codigo_qr VARCHAR(255) NOT NULL,
    fecha_registro DATE NOT NULL DEFAULT CURRENT_DATE,
    usuario_id INTEGER NULL,
    ubicacion_id INTEGER NULL,
    CONSTRAINT animal_sexo_chk CHECK (sexo IN ('Macho','Hembra') OR sexo IS NULL),
    CONSTRAINT animal_codigo_qr_uk UNIQUE (codigo_qr),
    CONSTRAINT fk_animal_usuario FOREIGN KEY (usuario_id)
        REFERENCES usuario(usuario_id) ON DELETE SET NULL,
    CONSTRAINT fk_animal_ubicacion FOREIGN KEY (ubicacion_id)
        REFERENCES ubicacion(ubicacion_id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS ix_animal_ubicacion ON animal (ubicacion_id);

-- ==================
-- TABLA: tratamiento
-- ==================
CREATE TABLE IF NOT EXISTS tratamiento (
    tratamiento_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo VARCHAR(50) NOT NULL,
    descripcion VARCHAR(250),
    fecha_tratamiento DATE NOT NULL DEFAULT CURRENT_DATE,
    estado VARCHAR(50) NOT NULL DEFAULT 'Pendiente',
    usuario_id INTEGER NOT NULL,
    animal_id INTEGER NOT NULL,
    CONSTRAINT tratamiento_estado_chk CHECK (estado IN ('Pendiente','Aprobado','Rechazado')),
    CONSTRAINT fk_tratamiento_usuario FOREIGN KEY (usuario_id)
        REFERENCES usuario(usuario_id) ON DELETE RESTRICT,
    CONSTRAINT fk_tratamiento_animal FOREIGN KEY (animal_id)
        REFERENCES animal(animal_id) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS ix_tratamiento_animal_fecha ON tratamiento (animal_id, fecha_tratamiento);

-- ==============
-- TABLA: insumo
-- ==============
CREATE TABLE IF NOT EXISTS insumo (
    insumo_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    unidad VARCHAR(50) NOT NULL,
    stock NUMERIC(10,2) NOT NULL DEFAULT 0,
    fecha_vencimiento DATE,
    CONSTRAINT insumo_stock_chk CHECK (stock >= 0)
);

-- =========================
-- TABLA: tratamiento_insumo
-- =========================
CREATE TABLE IF NOT EXISTS tratamiento_insumo (
    tratamiento_id INTEGER NOT NULL,
    insumo_id INTEGER NOT NULL,
    cantidad NUMERIC(10,2) NOT NULL,
    CONSTRAINT pk_tratamiento_insumo PRIMARY KEY (tratamiento_id, insumo_id),
    CONSTRAINT tratamiento_insumo_cantidad_chk CHECK (cantidad > 0),
    CONSTRAINT fk_tratinsumo_tratamiento FOREIGN KEY (tratamiento_id)
        REFERENCES tratamiento(tratamiento_id) ON DELETE CASCADE,
    CONSTRAINT fk_tratinsumo_insumo FOREIGN KEY (insumo_id)
        REFERENCES insumo(insumo_id) ON DELETE RESTRICT
);
CREATE INDEX IF NOT EXISTS ix_tratinsumo_insumo ON tratamiento_insumo (insumo_id);

-- ======================
-- TABLA: historial_estado
-- ======================
CREATE TABLE IF NOT EXISTS historial_estado (
    historial_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    animal_id INTEGER NOT NULL,
    usuario_id INTEGER NULL,
    estado VARCHAR(30) NOT NULL,
    observaciones TEXT,
    fecha_estado TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    proximo_control DATE,
    CONSTRAINT historial_estado_chk CHECK (
        estado IN ('En tratamiento','Recuperado','Adoptado','Fallecido','Observacion')
    ),
    CONSTRAINT fk_historial_animal FOREIGN KEY (animal_id)
        REFERENCES animal(animal_id) ON DELETE CASCADE,
    CONSTRAINT fk_historial_usuario FOREIGN KEY (usuario_id)
        REFERENCES usuario(usuario_id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS ix_historial_estado_animal ON historial_estado (animal_id);

-- =================
-- TABLA: foto_animal
-- =================
CREATE TABLE IF NOT EXISTS foto_animal (
    foto_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    animal_id INTEGER NOT NULL,
    usuario_id INTEGER NULL,
    filename VARCHAR(255) NOT NULL,
    titulo VARCHAR(100),
    fecha_subida TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_foto_animal FOREIGN KEY (animal_id)
        REFERENCES animal(animal_id) ON DELETE CASCADE,
    CONSTRAINT fk_foto_usuario FOREIGN KEY (usuario_id)
        REFERENCES usuario(usuario_id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS ix_foto_animal_animal ON foto_animal (animal_id);
